<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43; - Tag - ysmiles home new</title>
        <link>https://ysmiles.com/tags/c&#43;&#43;/</link>
        <description>C&#43;&#43; - Tag - ysmiles home new</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>fromblog@ysmiles.com (Frederick)</managingEditor>
            <webMaster>fromblog@ysmiles.com (Frederick)</webMaster><copyright>copyright test</copyright><lastBuildDate>Thu, 19 Apr 2018 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://ysmiles.com/tags/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>Generic recursive lambda in C&#43;&#43;14</title>
    <link>https://ysmiles.com/posts/generic-recursive-lambda-in-c&#43;&#43;14/</link>
    <pubDate>Thu, 19 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author>Frederick</author>
    <guid>https://ysmiles.com/posts/generic-recursive-lambda-in-c&#43;&#43;14/</guid>
    <description><![CDATA[When we practice LeetCode questions, we always need to write a helper recursive function outside the main solution function. For example, to find the max value in a binary tree, we can have the following codes: (method-1)
class Solution { // pre-order DFS  void helper(TreeNode *root, int &amp;ret) { if (!root) return; ret = std::max(ret, root-&gt;val); helper(root-&gt;left); helper(root-&gt;right); } public: int findMax(TreeNode *root) { int maxval = std::numeric_limits&lt;int&gt;::min(); helper(root, maxval); return maxval; } }; Sometimes we don&rsquo;t want to write the helper outside our working function, i.]]></description>
</item>
<item>
    <title>Differences between an interface and abstract class</title>
    <link>https://ysmiles.com/posts/differences-between-an-interface-and-abstract-class/</link>
    <pubDate>Sun, 24 Dec 2017 00:00:00 &#43;0000</pubDate>
    <author>Frederick</author>
    <guid>https://ysmiles.com/posts/differences-between-an-interface-and-abstract-class/</guid>
    <description><![CDATA[Introduction This article is mainly talking about the difference between interface and abstract class, which is a frequently asked questions at interview. I will discuss Java first, and then C++.
Personally, I am more familiar with C++, although I can write Java. So at the time one friend asked me about the question, I was shocked. I did not know &ldquo;interface&rdquo; at all. But after searching around, I learned that &ldquo;interface&rdquo; and &ldquo;abstract class&rdquo; are somehow ideas of OOP (especially, Java OOP).]]></description>
</item>
</channel>
</rss>
